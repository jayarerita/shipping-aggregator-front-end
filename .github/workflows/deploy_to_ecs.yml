# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Deploy to Amazon ECS - GovCloud West

on:
  # Only deploy if pushed to main branch and change was not to .github files (eg - workflows etc.)
  release:
    types: [published]
    branches:
      - main
    paths-ignore:
      - '.github/**'
      - '**/README.md'
  
  # To allow for manual running
  workflow_dispatch:

env:
  AWS_REGION: us-gov-west-1                   # set this to your preferred AWS region, e.g. us-west-1
  ECR_REPOSITORY_APP: shipping-aggregator-front-end          # set this to your Amazon ECR repository name
  ECS_SERVICE: shipping-aggregator                # set this to your Amazon ECS service name
  ECS_CLUSTER: shipping-aggregator                # set this to your Amazon ECS cluster name
  ECS_TASK_DEFINITION: ./aws/ecs_deploy.json # set this to the path to your Amazon ECS task definition
                                               # file, e.g. .aws/task-definition.json
  CONTAINER_NAME_APP: app          # set this to the name of the container in the containerDefinitions section of your task definition

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Get tag name for version
        id: get_version
        #run: echo "VERSION=${GITHUB_REF/refs\/tags\//}" >> $GITHUB_ENV
        run: echo "VERSION=0" >> $GITHUB_ENV # temporary for testing

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push app image to Amazon ECR
        id: build-app-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ env.ECR_REPOSITORY_APP }}-${{ env.VERSION }}
        run: |
          # Build a docker container for the app and push it to
          # ECR so that it can be deployed to ECS.
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY_APP:$IMAGE_TAG --file Dockerfile .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY_APP:$IMAGE_TAG
          echo "APP_IMAGE=$ECR_REGISTRY/$ECR_REPOSITORY_APP:$IMAGE_TAG" >> $GITHUB_ENV

      # - name: Render Amazon ECS task definition for the app container
      #   id: render-app-container
      #   uses: aws-actions/amazon-ecs-render-task-definition@v1
      #   with:
      #     task-definition: ${{ env.ECS_TASK_DEFINITION }}
      #     container-name: ${{ env.CONTAINER_NAME_APP }}
      #     image: ${{ env.APP_IMAGE }}
      #     environment-variables: |
      #       AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
      #       AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
      #       APP_VERSION=${{ env.VERSION }}

      # - name: Deploy Amazon ECS task definition
      #   uses: aws-actions/amazon-ecs-deploy-task-definition@v1.4.10
      #   with:
      #     task-definition: ${{ steps.render-proxy-container.outputs.task-definition }}
      #     service: ${{ env.ECS_SERVICE }}
      #     cluster: ${{ env.ECS_CLUSTER }}
      #     wait-for-service-stability: true